# ================================================================================
# Copyright (c) 2017-2018 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
tosca_definitions_version: cloudify_dsl_1_3

description: >
  This handcrafted blueprint will install the ves collector and provision the needed message router topics. This blueprint can be used to verify that a platform installation is operational and working correctly.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - https://NEXUS_REPO_HOST:8443/repository/NEXUS_RAW/type_files/docker/2.2.0/node-type.yaml
  - https://NEXUS_REPO_HOST:8443/repository/NEXUS_RAW/type_files/relationship/1.0.0/node-type.yaml
  - http://NEXUS_REPO_HOST:8081/repository/NEXUS_RAW/type_files/dmaap/dmaap_mr.yaml

inputs:

  service_id:
    description: Unique id used for an instance of this DCAE service. Use deployment id
    default: 'foobar'
  location_id:
    default: 'solutioning-central'
  docker_host_override:
    default: 'component_dockerhost'

  topic00_aaf_username:
  topic00_aaf_password:
  topic00_location:
    default: mtc5
  topic00_client_role:
    default: com.att.dcae.member

  topic01_aaf_username:
  topic01_aaf_password:
  topic01_location:
    default: mtc5
  topic01_client_role:
    default: com.att.dcae.member

  topic02_aaf_username:
  topic02_aaf_password:
  topic02_location:
    default: mtc5
  topic02_client_role:
    default: com.att.dcae.member

  topic03_aaf_username:
  topic03_aaf_password:
  topic03_location:
    default: mtc5
  topic03_client_role:
    default: com.att.dcae.member

node_templates:

  topic00:
    type: dcae.nodes.Topic
    properties:
      topic_name: sec-fault-unsecure
  
  topic01:
    type: dcae.nodes.Topic
    properties:
      topic_name: sec-measurement

  topic02:
    type: dcae.nodes.Topic
    properties:
      topic_name: sec-measurement-unsecure
  
  topic03:
    type: dcae.nodes.Topic
    properties:
      topic_name: sec-fault

  component00:
    type: dcae.nodes.DockerContainerForComponentsUsingDmaap
    properties:
      service_component_type:
        'dcae-controller-ves-collector'
      service_id:
        { get_input: service_id }
      location_id:
        { get_input: location_id }
      application_config:
        collector.keystore.passwordfile: "/opt/app/dcae-certificate/.password"
        collector.service.secure.port: -1
        tomcat.maxthreads: '200'
        collector.keystore.file.location: "/opt/app/dcae-certificate/keystore.jks"
        header.authflag: 0
        collector.service.port: 8080
        streams_publishes:
          sec_fault_unsecure:
            aaf_password: { get_input: topic00_aaf_password }
            dmaap_info: "<<topic00>>"
            type: message_router
            aaf_username: { get_input: topic00_aaf_username }
          sec_measurement:
            aaf_password: { get_input: topic01_aaf_password }
            aaf_username: { get_input: topic01_aaf_username }
            type: message_router
            dmaap_info: "<<topic01>>"
          sec_measurement_unsecure:
            aaf_password: { get_input: topic02_aaf_password }
            aaf_username: { get_input: topic02_aaf_username }
            dmaap_info: "<<topic02>>"
            type: message_router
          sec_fault:
            aaf_password: { get_input: topic03_aaf_password }
            aaf_username: { get_input: topic03_aaf_username }
            dmaap_info: "<<topic03>>"
            type: message_router
        services_calls: {}
        collector.schema.checkflag: 1
        collector.dmaap.streamid: fault=sec_fault,roadm-sec-to-hp|syslog=sec_syslog|heartbeat=sec_heartbeat|measurementsForVfScaling=sec_measurement|mobileFlow=sec_mobileflow|other=sec_other|stateChange=sec_statechange|thresholdCrossingAlert=sec_thresholdCrossingAlert
        header.authlist: userid1,base64encodepwd1|userid2,base64encodepwd2
        streams_subscribes: {}
        collector.inputQueue.maxPending: 8096
        collector.schema.file: "./etc/CommonEventFormat_27.2.json"
      image:
        NEXUS_REPO_HOST:18443/dcae-dev-raw/dcae-controller-ves-collector:1.1.3
      docker_config:
        healthcheck:
          type: "http"
          interval: "15s"
          timeout: "1s"
          endpoint: "/"
      streams_publishes:
        - name: topic00
          location: { get_input: topic00_location }
          client_role: { get_input: topic00_client_role }
          type: message_router
        - name: topic01
          location: { get_input: topic01_location }
          client_role: { get_input: topic01_client_role }
          type: message_router
        - name: topic02
          location: { get_input: topic02_location }
          client_role: { get_input: topic02_client_role }
          type: message_router
        - name: topic03
          location: { get_input: topic03_location }
          client_role: { get_input: topic03_client_role }
          type: message_router
      streams_subscribes: []
    relationships:
      - type: dcae.relationships.component_contained_in
        target: docker_host
      - type: dcae.relationships.publish_events
        target: topic00
      - type: dcae.relationships.publish_events
        target: topic01
      - type: dcae.relationships.publish_events
        target: topic02
      - type: dcae.relationships.publish_events
        target: topic03
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          inputs:
            cleanup_image:
              True

  docker_host:
    type: dcae.nodes.SelectedDockerHost
    properties:
        location_id:
          { get_input: location_id }
        docker_host_override:
          { get_input: docker_host_override }
